/* so array elements are  of form
A-K   B-K  C-K   A+K     B+K        C+K  but we dont  know actual sequence
substrate A-K   from the whole so
0       B-A  C-A   2K     B-A+2K   C-A+2K
so we calculate  2k that is the Doublediff and store in  doublediff  vector 

so we put all possibel value of double diff in doublediff vector
we iterate through every diff in double diff and try to form our ans
for  diff :doubeldiff
    iteration 1:  
	                getsolution      // Explantion of getsolution function
					{
	                we store freq of every element in map
	                 we assume A-K as the first element in nums
					 and we calculate wheteher a+k is present or not bu A-K+ diff       where diff= 2k
					 if
					 {we find A+K  we decrement its freq by 1
					 and we calculate the A as   A=A-K + diff/2;
					 }
					 else    we return 
					 }
					 if (ans.size()== nums.size()/2)     return ans
					 
	iteration 2....
	iteration 3..
	 return empty array  */
					 

class Solution {
public:
    vector<int> getdoublediff(vector<int> nums)
    {
        int n= nums.size(),dif;
        vector<int> diff;
        
        for (int i=0;i<n;i++)
        {
            dif= nums[i]-nums[0];
            if (dif >0  && (dif %2==0))   diff.push_back(dif);
        }
        return diff;
    }
    vector<int> getsolution(vector<int> nums,int diff)
    {
        int n=nums.size();
        unordered_map<int,int> mp;
        vector<int> res;
        for (auto x: nums) mp[x]++;
        for (int i=0;i<n;i++)
        {
            if (mp.find(nums[i])!=mp.end())
            {
                mp[nums[i]]--;
                if (mp[nums[i]]==0)  mp.erase(nums[i]);
                
                int val= nums[i]+diff;
                if (mp.find(val)==mp.end())   return res;
                else
                {
                    mp[val]--;
                    if (mp[val]==0)  mp.erase(val);
                    
                    res.push_back(nums[i]+(diff)/2);
                }
            }
        }
        return res;
    }
    vector<int> recoverArray(vector<int>& nums) {
        
            int n= nums.size();
            sort(nums.begin(),nums.end());
        
        vector<int> doublediff= getdoublediff(nums);
        
        for (auto diff : doublediff)
        {
            vector<int> ans= getsolution(nums,diff);
            if (ans.size()  == (n/2))    return ans;
        }
        vector<int>res;
        return res;
        
    }
};
