/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class BSTIterator {
public:
    TreeNode* prev;
    int first;
    vector<int> inorder;
    void traversal(TreeNode* root)
    {
        if (root==NULL)   return ;
     
     traversal(root->left);
     inorder.push_back(root->val);
     traversal(root->right);

    }
    BSTIterator(TreeNode* root) {
        traversal(root);
        first=-1;
    }
    
    int next() {
        if (first==-1)
        {
            first=0;
            return  inorder[0];
            
        } 
        first++;
        return inorder[first];
        
        
    }
    
    bool hasNext() {
        if (first+1==inorder.size())   return false;
        return true;
    }
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */
