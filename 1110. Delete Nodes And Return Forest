-------M1
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* hat(TreeNode* root,unordered_set<int> st,vector<TreeNode*> & ans,bool token)
    {
        if (root==NULL)   return NULL;
        
        if (st.find(root->val)!=st.end())
        {
            root->left=hat( root->left,st,ans,true);
            root->right=hat(root->right,st,ans,true);
            root->left=NULL;
            root->right=NULL;
            return NULL;
        }
        else if (token)
        {
            ans.push_back(root);
            
        }
        root->left=hat(root->left,st,ans, false);
        root->right=hat(root->right,st,ans,false);
        return root;
    }
    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {
        unordered_set<int> st;
        for (int i=0;i<to_delete.size();i++)
        {
            st.insert(to_delete[i]);
        }
        vector<TreeNode*> ans;
        TreeNode* has=hat( root,st,ans,true);
        return ans;
    }
};


-----M2 efficient in terms of Memory
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* hat(TreeNode * root,unordered_map<int,int>&mp,vector<TreeNode*>& ans)
    {
        if (root==NULL)  return NULL;
        
        TreeNode * left=hat(root->left,mp,ans);
        TreeNode * right=hat(root->right,mp,ans);
        
        if (mp.find(root->val)!=mp.end())   
        {
           if (left) ans.push_back(left);
           if (right) ans.push_back(right);
            return NULL;
        }
        
        root->left=left;
        root->right=right;
        return root;
         
    }
    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {
        vector<TreeNode*> ans;
        if (root==NULL)  return ans;
        unordered_map<int,int>mp;
        for (int i=0;i<to_delete.size();i++)
        {
            mp[to_delete[i]]++;
        }
        TreeNode* has=hat(root,mp,ans);
        if (has) ans.push_back(has);
        return ans;
        
    }
};
